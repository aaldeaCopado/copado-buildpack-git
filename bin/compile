#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir>

# fail fast
# NOTE: pipes ( | ) or command concat ( && ) will make this useless, so do not use them.
set -e

# parse and derive params
BUILD_DIR=$1
CACHE_DIR=$2
DEB_FILES=support
LP_DIR=`cd $(dirname $0); cd ..; pwd`

function topic() {
  echo "-----> $*"
}

APT_CACHE_DIR="$CACHE_DIR/apt/cache"
APT_STATE_DIR="$CACHE_DIR/apt/state"
APT_SOURCES_LIST="$BUILD_DIR/sources.list"
CURL_SRC_DIR="$BUILD_DIR/curl"
CURL_TGZ_DIR="$DEB_FILES/curl-7.58.0.tar.gz"

mkdir -p "$APT_CACHE_DIR/archives/partial"
mkdir -p "$APT_STATE_DIR/lists/partial"

APT_OPTIONS="-o debug::nolocking=true -o dir::cache=$APT_CACHE_DIR -o dir::state=$APT_STATE_DIR -o dir::etc::sourcelist=$APT_SOURCES_LIST"

topic "Compiling cURL with system openSSL library"
topic "Creating directory $CURL_SRC_DIR"
mkdir -p "$CURL_SRC_DIR"
topic "Extracting cURL sources from $CURL_TGZ_DIR to $CURL_SRC_DIR"
tar -xf $CURL_TGZ_DIR -C $CURL_SRC_DIR

ls $CURL_SRC_DIR
topic "Compiling cURL..."
cd $CURL_SRC_DIR/*
$CURL_SRC_DIR/.configure --with-ssl --prefix=$BUILD_DIR/.curl
make
make install


topic "Installing .debs for git"

for DEB in $(ls -1 $DEB_FILES/*.deb); do
  topic "Installing $DEB"
  dpkg -x $DEB $BUILD_DIR/.apt/
done

topic "Writing profile script"
mkdir -p $BUILD_DIR/.profile.d
cat <<EOF > $BUILD_DIR/.profile.d/git.sh
export PATH="/app/.curl/bin:/app/.apt/usr/bin:$PATH"
export LD_LIBRARY_PATH="/app/.curl/lib:/app/.apt/usr/lib:/app/.apt/usr/lib/x86_64-linux-gnu:$LD_LIBRARY_PATH"
export LIBRARY_PATH="/app/.curl/lib:/app/.apt/usr/lib:/app/.apt/usr/lib/git-core:$LIBRARY_PATH"
export CPATH="$INCLUDE_PATH"
export CPPPATH="$INCLUDE_PATH"
export GIT_CONFIG_NOSYSTEM=1
export GIT_EXEC_PATH=/app/.apt/usr/lib/git-core/
EOF

. $BUILD_DIR/.profile.d/git.sh

cp $BUILD_DIR/.profile.d/git.sh "$LP_DIR/export"

echo "### listing... $LP_DIR/export"
cat "$LP_DIR/export"
