#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir>

# fail fast
# NOTE: pipes ( | ) will make this useless, so do not use them.
set -e

# parse and derive params
BUILD_DIR=$1
CACHE_DIR=$2
DEB_FILES=support
LP_DIR=`cd $(dirname $0); cd ..; pwd`

function topic() {
  echo "-----> $*"
}


APT_CACHE_DIR="$CACHE_DIR/apt/cache"
APT_STATE_DIR="$CACHE_DIR/apt/state"
APT_SOURCES_LIST="$BUILD_DIR/sources.list"

mkdir -p "$APT_CACHE_DIR/archives/partial"
mkdir -p "$APT_STATE_DIR/lists/partial"

APT_OPTIONS="-o debug::nolocking=true -o dir::cache=$APT_CACHE_DIR -o dir::state=$APT_STATE_DIR -o dir::etc::sourcelist=$APT_SOURCES_LIST"


topic "Adding git-core PPA"
cp /etc/apt/sources.list $APT_SOURCES_LIST
echo "deb http://ppa.launchpad.net/git-core/ppa/ubuntu xenial main" >> $APT_SOURCES_LIST

topic "Cleaning apt caches"
apt-get $APT_OPTIONS --allow-unauthenticated clean

topic "Updating apt caches"
apt-get $APT_OPTIONS --allow-unauthenticated update

apt-cache $APT_OPTIONS madison git

apt-cache $APT_OPTIONS policy git

topic "Fetching .debs for git"
#apt-get $APT_OPTIONS --allow-unauthenticated -y --force-yes --no-install-recommends -d install --reinstall git=1:2.18.0-0ppa1~ubuntu16.04.1

for DEB in $(ls -1 $DEB_FILES/*.deb); do
  topic "Installing $(basename $DEB)"
  dpkg -x $DEB $BUILD_DIR/.apt/
done

topic "Writing profile script"
mkdir -p $BUILD_DIR/.profile.d
cat <<EOF > $BUILD_DIR/.profile.d/git.sh
export PATH="/app/.apt/usr/bin:$PATH"
export LD_LIBRARY_PATH="/app/.apt/usr/lib:/app/.apt/usr/lib/x86_64-linux-gnu:$LD_LIBRARY_PATH"
export LIBRARY_PATH="/app/.apt/usr/lib:/app/.apt/usr/lib/git-core:$LIBRARY_PATH"
export CPATH="$INCLUDE_PATH"
export CPPPATH="$INCLUDE_PATH"
export GIT_CONFIG_NOSYSTEM=1
export GIT_EXEC_PATH=/app/.apt/usr/lib/git-core/
EOF

. $BUILD_DIR/.profile.d/git.sh

cp $BUILD_DIR/.profile.d/git.sh "$LP_DIR/export"

echo "### listing... $LP_DIR/export"
cat "$LP_DIR/export"

